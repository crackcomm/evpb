// Code generated by protoc-gen-gogo.
// source: github.com/crackcomm/evpb/example/pb/message.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/crackcomm/evpb/example/pb/message.proto

It has these top-level messages:
	Movie
	Video
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	evpb "github.com/crackcomm/evpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Movie struct {
	// Id - Id of movie to find.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Title - Movie title.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Year - Movie year.
	Year uint32 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
}

func (m *Movie) Reset()         { *m = Movie{} }
func (m *Movie) String() string { return proto.CompactTextString(m) }
func (*Movie) ProtoMessage()    {}

type Video struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *Video) Reset()         { *m = Video{} }
func (m *Video) String() string { return proto.CompactTextString(m) }
func (*Video) ProtoMessage()    {}

func init() {
	proto.RegisterType((*Movie)(nil), "evpb.example.Movie")
	proto.RegisterType((*Video)(nil), "evpb.example.Video")
}

var topicNameMovie = "evpb.example.Movie"

func ConsumeMovie(q evpb.Interface, h func(*Movie) error) error {
	return q.Consume(topicNameMovie, func(body []byte) error {
		msg := new(Movie)
		if err := proto.Unmarshal(body, msg); err != nil {
			return err
		}
		return h(msg)
	})
}

func SendMovie(q evpb.Interface, msg *Movie) error {
	body, err := proto.Marshal(msg)
	if err != nil {
		return err
	}
	return q.Send(topicNameMovie, body)
}

var topicNameVideo = "evpb.example.Video"

func ConsumeVideo(q evpb.Interface, h func(*Video) error) error {
	return q.Consume(topicNameVideo, func(body []byte) error {
		msg := new(Video)
		if err := proto.Unmarshal(body, msg); err != nil {
			return err
		}
		return h(msg)
	})
}

func SendVideo(q evpb.Interface, msg *Video) error {
	body, err := proto.Marshal(msg)
	if err != nil {
		return err
	}
	return q.Send(topicNameVideo, body)
}
